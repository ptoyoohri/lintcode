class Solution {
public:
    /**
     * @param nums: an array
     * @param k: a target value
     * @return: the maximum length of a subarray that sums to k
     */
     
    /*
    input               [a,   b,     c,       d,         e,           f,             g]
    sum_map's index is  [a, a+b, a+b+c, a+b+c+d, a+b+c+d+e, a+b+c+d+e+f, a+b+c+d+e+f+g]
                val is  [0,   1,     2,       3,         4,           5,             6]
    when i travel to i == 4;
    if k == c+d+e, it will be a+b+c+d+e - (a+b)
    , and the MaxLength will be 4-1 = 3.
    So I use unordered_map to find index of a+b, which is 1. And i=4, MaxLength will be 4-1 = 3;
    
    ex: 
        [1, -1, 5, -2, 3], k = 3
        
        sum_map index will be [1, 0, 5, 3, 6].
                val will be   [0, 1, 2, 3, 4].
                
        
    */
    int maxSubArrayLen(vector<int> &nums, int k) {
        // Write your code here
        unordered_map<int, int> sum_map;
        int sum = 0;
        int MaxLength = 0;
        for( int i=0; i<nums.size(); i++)
        {
            sum = sum + nums[i]; 
            if(sum_map.count(sum) <= 0) // $$ because i is increasing and we only want the MaxLength, so we only want first sum's index;
                sum_map[sum] = i;
                
            if(sum == k)
                MaxLength = i + 1;
            else if(sum_map.count(sum-k) > 0)
                MaxLength = max(MaxLength, i - sum_map[sum-k]);
        }
        return MaxLength;
        
    
    }
};
