#include <numeric>

class Solution {
public:
    /**
     * @param nums: an array
     * @param k: a target value
     * @return: the maximum length of a subarray that sums to k
     */
    int maxSubArrayLen(vector<int> &nums, int k) {
        // Write your code here
        int maxLength = 0;
        int sumOfNum = accumulate(nums.begin(), nums.end(), 0);
        int dropLength = 0;
        int Length =  nums.size();
        for( int head = 0, tail = Length-1; dropLength != nums.size(); )
        {
            
            if(sumOfNum == k)
            {
                break;
            }
            else
            {
                if(tail == Length - 1) // $$ searh over
                {
                    dropLength ++;
                    head = 0;
                    tail = Length-1 - dropLength;
                    sumOfNum = accumulate(nums.begin(), nums.end() - dropLength, 0);
                }
                else
                {
                   
                    sumOfNum = sumOfNum - nums[head++] + nums[++tail];

                }
                
            }
            
        }
        return nums.size() - dropLength;
    }
};
